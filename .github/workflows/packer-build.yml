name: Packer Build CI

on:
  push:
    branches:
      - main

jobs:
  packer-build-npm-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy webapp files
        run: rsync -arv --exclude='.git/' --exclude='.github/' --exclude='.gitignore' . ./webapp && ls -R

      - name: Zip file
        uses: montudor/action-zip@v1
        with:
          args: zip -r webapp.zip webapp/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: check node and npm version
        run: |
          node -v
          npm -v

      - name: Install MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql.service

      - name: Configure MySQL
        run: |
          sudo mysql --user=${{ secrets.DB_USERNAME }} --password=${{ secrets.WEBAPP_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};"

      - name: Configure environment variables
        run: |
          echo > .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
          echo DB_PASSWORD=${{ secrets.WEBAPP_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_DIALECT=${{ secrets.DB_DIALECT }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env
          echo AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} >> .env
          echo SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }} >> .env

      - name: Check .env file
        run: cat .env

      - name: Install Node dependencies
        run: npm install

      - name: Run tests
        run: npm test -- --forceExit

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Setup github-action-awscli
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Packer init
        id: packer_init
        run: |
          cd packer
          packer init ./ami.pkr.hcl

      - name: Packer validate
        id: packer_validate
        run: >
          cd packer && 
          packer validate -var 'aws_region=${{vars.AWS_REGION}}'
          -var 'ssh_username=${{vars.SSH_USERNAME}}'
          -var 'aws_access_key_id=${{secrets.ACCESS_KEY}}'
          -var 'aws_secret_access_key=${{secrets.SECRET_ACCESS_KEY}}'
          -var 'ami_users=${{secrets.AMI_USERS}}'
          -var 'source_ami=${{vars.SOURCE_AMI}}'
          -var 'ami_description=${{vars.AMI_DESCRIPTION}}'
          -var 'instance_type=${{vars.INSTANCE_TYPE}}'
          -var 'ami_name=${{vars.AMI_NAME}}'
          -var 'subnet_id=${{vars.SUBNET_ID}}'
          -var 'delay_seconds=${{vars.DELAY_SECONDS}}'
          -var 'max_attempts=${{vars.MAX_ATTEMPTS}}'
          -var 'volume_size=${{vars.VOLUME_SIZE}}'
          -var 'volume_type=${{vars.VOLUME_TYPE}}'
          ami.pkr.hcl

      - name: Packer build
        id: packer_build
        run: |
          cd packer
          packer build \
            -var "aws_region=${{vars.AWS_REGION}}" \
            -var "ssh_username=${{vars.SSH_USERNAME}}" \
            -var "aws_access_key_id=${{secrets.ACCESS_KEY}}" \
            -var "aws_secret_access_key=${{secrets.SECRET_ACCESS_KEY}}" \
            -var "ami_users=${{secrets.AMI_USERS}}" \
            -var "source_ami=${{vars.SOURCE_AMI}}" \
            -var "ami_description=${{vars.AMI_DESCRIPTION}}" \
            -var "instance_type=${{vars.INSTANCE_TYPE}}" \
            -var "ami_name=${{vars.AMI_NAME}}" \
            -var "subnet_id=${{vars.SUBNET_ID}}" \
            -var "delay_seconds=${{vars.DELAY_SECONDS}}" \
            -var "max_attempts=${{vars.MAX_ATTEMPTS}}" \
            -var "volume_size=${{vars.VOLUME_SIZE}}" \
            -var "volume_type=${{vars.VOLUME_TYPE}}" \
            ami.pkr.hcl 2>&1 | tee build_output.txt

      - name: Extract AMI ID
        id: extract_ami
        run: |
          cd packer
          AMI_ID=$(grep -oP 'ami-[a-z0-9]{8,17}' build_output.txt | tail -1)
          if [ -z "$AMI_ID" ]; then
            echo "Error: Failed to extract AMI ID from Packer output"
            cat build_output.txt
            exit 1
          fi
          echo "Extracted AMI ID: $AMI_ID"
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_OUTPUT

      - name: Setup github-action-awscli for demo account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Create new Launch Template version
        id: create_lt_version
        run: |
          TEMPLATE_ID="${{ vars.LAUNCH_TEMPLATE_ID }}"
          AMI_ID="${{ steps.extract_ami.outputs.AMI_ID }}"
          
          if [ -z "$AMI_ID" ]; then
            echo "Error: AMI ID is empty"
            exit 1
          fi
          
          echo "Using AMI ID: $AMI_ID"
          echo "Using Template ID: $TEMPLATE_ID"
          
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id "$TEMPLATE_ID" \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          if [ -z "$NEW_VERSION" ]; then
            echo "Error: Failed to create new launch template version"
            exit 1
          fi
          
          echo "Created new version: $NEW_VERSION"
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          aws ec2 modify-launch-template \
            --launch-template-id "$TEMPLATE_ID" \
            --default-version "$NEW_VERSION"

      - name: Start ASG Instance Refresh
        id: start_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ vars.ASG_NAME }}" \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 90}' \
            --query 'InstanceRefreshId' \
            --output text)
          
          if [ -z "$REFRESH_ID" ]; then
            echo "Error: Failed to start instance refresh"
            exit 1
          fi
          
          echo "Started instance refresh with ID: $REFRESH_ID"
          echo "REFRESH_ID=${REFRESH_ID}" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh
        run: |
          MAX_ATTEMPTS=60  # 30 minutes maximum wait time (30 seconds * 60)
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "${{ vars.ASG_NAME }}" \
              --instance-refresh-ids "${{ steps.start_refresh.outputs.REFRESH_ID }}" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Instance Refresh Status: $STATUS"
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              exit 0
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled"
              exit 1
            elif [ "$STATUS" = "Pending" ] || [ "$STATUS" = "InProgress" ]; then
              ATTEMPT=$((ATTEMPT + 1))
              sleep 30
            else
              echo "Unknown status: $STATUS"
              exit 1
            fi
          done
          
          echo "Timeout waiting for instance refresh to complete"
          exit 1